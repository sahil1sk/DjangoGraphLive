{"version":3,"sources":["fetchData/baseUrl.js","fetchData/ActionTypes.js","fetchData/fetchFun.js","taskActions/fetchTask.js","contexts/taskContext.js","task.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","FETCH_TASK_DATA","CREATE_TASK","UPDATE_TASK","DELETE_TASK","fetchData","fetchType","variables","callback","fetch","method","headers","Content-Type","body","JSON","stringify","query","then","response","ok","error","Error","status","statusText","message","data","json","catch","alert","reducer","state","action","type","ActionTypes","Object","objectSpread","tasks","payload","addingNew","node","concat","filter","taskItem","id","idIs","title","task","completed","fetchTaskList","fetchCreateTask","fetchDeleteTask","fetchupdate","strike","TaskContext","createContext","TaskContextProvider","props","_useState","useState","_useState2","slicedToArray","setFetchData","_useReducer","useReducer","_useReducer2","dispatch","fetchTasks","allTasks","edges","creatingTask","createTask","deletetingTask","updateTask","useEffect","react_default","a","createElement","Provider","value","deleteTask","updatingTask","children","Tasks","callFun","setCallFun","_useState3","_useState4","displayVal","setDisplayVal","contextType","useContext","_useState5","_useState6","edit","setEdit","_useState7","_useState8","taskVal","setTaskVal","titleVal","document","getElementById","setTimeout","Fragment","style","height","className","onSubmit","event","preventDefault","replace","flex","name","placeholder","map","key","onClick","strikeUnstrike","startEdit","color","visibility","src","alt","App","taskContext","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.40c42197.chunk.js","sourcesContent":["export const baseUrl = \"\";","export const FETCH_TASK_DATA = 'FETCH_TASK_DATA';\r\nexport const CREATE_TASK = 'CREATE_TASK';\r\nexport const UPDATE_TASK = 'UPDATE_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const TASK_ERROR = 'TASK_ERROR';","import {baseUrl} from './baseUrl';\r\nimport * as ActionTypes from './ActionTypes';\r\n\r\nexport const fetchData = (fetchType, variables, callback) => {\r\n\r\n    fetch( baseUrl + \"/graphqlApi/\", {\r\n        method: 'POST',\r\n        //credentials: 'include',       // if you will turn on this then in django setting you have to allow coros\r\n        headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n        body: JSON.stringify({ query:fetchType, variables:variables })  //JSON.stringify({ query: mutation })\r\n    })\r\n        .then(response => {\r\n            if (response.ok){\r\n                return response\r\n            }\r\n            else { \r\n                var error = new Error('Error: '+ response.status + ': ' + response.statusText); \r\n                error.response = response;  \r\n                throw error; \r\n            }\r\n\r\n        },               \r\n        error => {\r\n            var errmess = new Error(error.message); \r\n            throw errmess;\r\n        })\r\n        .then( data => data.json())\r\n        .then(data => {\r\n            callback(data.data)})\r\n        .catch(error => alert(\"error: \" + error.message + \"\\n Please refresh your page\"));\r\n        \r\n}\r\n\r\n \r\nexport function reducer(state, action){\r\n    switch (action.type) {\r\n        case ActionTypes.FETCH_TASK_DATA:\r\n            return {...state, tasks:action.payload}\r\n        \r\n        case ActionTypes.CREATE_TASK:\r\n            const newTask = {\"node\":action.payload}\r\n            const addingNew = [newTask].concat(state.tasks)\r\n            return {...state, tasks: addingNew}\r\n        \r\n        case ActionTypes.UPDATE_TASK:\r\n            const tasks = state.tasks.filter((taskItem) => {\r\n                if(taskItem.node.id === action.payload.idIs){\r\n                    taskItem.node.title = action.payload.task.title\r\n                    taskItem.node.completed = action.payload.task.completed\r\n                    return taskItem\r\n                }else{\r\n                    return taskItem\r\n                }\r\n            })\r\n            return {...state, tasks:tasks}\r\n\r\n        case ActionTypes.DELETE_TASK:\r\n            return {...state, tasks: state.tasks.filter(taskItem => taskItem.node.id  !== action.payload )}\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { fetchData } from \"../fetchData/fetchFun\";\r\n\r\n// this is for fetching the data\r\nexport const fetchTaskList = (callback) => {\r\n    const variables = {\r\n        \"id\": \"\",\r\n        \"title\": \"\"\r\n      }\r\n      \r\n    const query = `\r\n        query {\r\n            allTasks(first:20){\r\n                edges{\r\n                  node{\r\n                    id\r\n                    title\r\n                    completed\r\n                  }\r\n                }\r\n            }\r\n        }\r\n    `;\t\r\n  \r\n    fetchData(query, variables, callback);\r\n}\r\n\r\n// this is for creating new task\r\nexport const fetchCreateTask = (title, callback) => {\r\n  const variables = {\r\n    \"title\": title\r\n  }\r\n\r\n\tconst mutation = `\r\n    mutation creatingTask( $title: String!){\r\n      createTask(input:{\r\n        title:$title\r\n      }){\r\n      task{\r\n          id\r\n          title\r\n          completed\r\n        }\r\n      }\r\n    }\r\n  `;\r\n  \r\n  fetchData(mutation, variables, callback);\r\n};\r\n\r\n// this is for deleting the task\r\nexport const fetchDeleteTask = (task, callback) => {\r\n  \r\n  const variables = {\r\n    \"id\": task.node.id\r\n  }\r\n\r\n\tconst mutation = `\r\n    mutation deleteTask( $id:ID!){\r\n      deleteTask(input:{\r\n        Id:$id\r\n      }){\r\n      task{\r\n          id\r\n        }\r\n      }\r\n    }  \r\n  `;\r\n  \r\n  fetchData(mutation, variables, callback);\r\n};\r\n\r\n// this is for doing strike and unstrike\r\nexport const fetchupdate = (task, strike, callback) => {\r\n\r\n  var variables = {\r\n    \"id\": task.node.id,\r\n    \"title\":task.node.title,\r\n  }\r\n\r\n  if (strike === true){\r\n    variables = {\r\n      \"id\": task.node.id,\r\n      \"completed\":  !task.node.completed  \r\n    }\r\n  }\r\n\r\n  const mutation = `\r\n    mutation updateTask( $id:ID! , $title: String, $completed:Boolean){\r\n      updateTask(input:{\r\n        Id:$id, title: $title, completed: $completed\r\n      }){\r\n      task{\r\n          id\r\n          title\r\n          completed\r\n        }\r\n      }\r\n    }  \r\n  `;\r\n\r\n  fetchData(mutation, variables, callback);\r\n};","import React, {createContext, useState, useEffect, useReducer} from 'react';\r\nimport { fetchTaskList, fetchCreateTask, fetchDeleteTask, fetchupdate } from '../taskActions/fetchTask';\r\nimport { reducer } from '../fetchData/fetchFun';\r\nimport * as ActionTypes from '../fetchData/ActionTypes';\r\n\r\nexport const TaskContext = createContext();\r\n    \r\n\r\n// this is the default funtion of this file which will called first\r\nfunction TaskContextProvider(props){\r\n    const [fetchData, setFetchData] = useState(false);\r\n    const [tasks, dispatch] = useReducer(reducer, {tasks:[]});\r\n    let idIs = 0;\r\n\r\n    // this will help to fetch the data\r\n    const fetchTasks = (data) => dispatch({\r\n        type: ActionTypes.FETCH_TASK_DATA,\r\n        payload: data.allTasks.edges\r\n    }); \r\n\r\n    // this is for update the state this is the callback method\r\n    const creatingTask = (data) => dispatch({\r\n        type: ActionTypes.CREATE_TASK,\r\n        payload: data.createTask.task\r\n    });\r\n\r\n    // this method is called by the user on creating title\r\n    const createTask = (title) => {\r\n        fetchCreateTask(title, creatingTask);\r\n    };\r\n\r\n    //  this is the callback method which will update the state\r\n    const deletetingTask = (data) => dispatch({\r\n        type: ActionTypes.DELETE_TASK,\r\n        payload: idIs\r\n    });\r\n\r\n    // this is method is used by user \r\n    const deleteTask = (task) => {\r\n        idIs = task.node.id;\r\n        fetchDeleteTask(task, deletetingTask);\r\n    }\r\n    \r\n    // this method will help to call the reducer and update the state\r\n    const updateTask = (data) => dispatch({\r\n       type: ActionTypes.UPDATE_TASK,\r\n       payload: {\"idIs\":idIs, \"task\":data.updateTask.task}  \r\n    });\r\n\r\n    // so this method is called by the user \r\n    const  updatingTask = (task, strike) => {\r\n        idIs = task.node.id        \r\n        fetchupdate(task, strike, updateTask)\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(fetchData === false){\r\n            fetchTaskList(fetchTasks); // so here we fetching all the data\r\n            setFetchData(true);\r\n        }\r\n    },[]) \r\n\r\n   return (\r\n       <TaskContext.Provider value={{...tasks, createTask: createTask, deleteTask: deleteTask, updatingTask:updatingTask}}>\r\n           {props.children}                              {/*here props.children means we provide all the data to the children*/}   \r\n       </TaskContext.Provider>\r\n   );\r\n\r\n}\r\n\r\nexport default TaskContextProvider;","import React, { useContext, useState } from 'react';\r\nimport './task.css';\r\nimport {baseUrl} from './fetchData/baseUrl.js';\r\nimport { TaskContext } from './contexts/taskContext';\r\n\r\nexport default function Tasks (){\r\n    const [callFun, setCallFun] = useState(false);\r\n    const [displayVal, setDisplayVal] = useState(false);\r\n    const contextType = useContext(TaskContext);\r\n    const {tasks, deleteTask, updatingTask} = contextType;\r\n    const [edit, setEdit] = useState(false);\r\n    const [taskVal, setTaskVal] = useState({\"node\":{\"id\":\"\", \"title\":\"\", \"completed\":\"\"}})\r\n    let titleVal = document.getElementById('title');\r\n      \r\n    if(callFun === false){\r\n      setTimeout(setDisplay,6500);\r\n      setCallFun(true);\r\n    }\r\n\r\n    function setDisplay(){\r\n        setDisplayVal(true);\r\n    }\r\n\r\n    function strikeUnstrike(task){\r\n      updatingTask(task, true);\r\n    };\r\n\r\n    function startEdit(task){\r\n      titleVal.value = task.node.title\r\n      setTaskVal(task);\r\n      setEdit(true);\r\n    };\r\n    \r\n    // when submit is clicked\r\n    function handleSubmit(event){\r\n      event.preventDefault(); \r\n      // eslint-disable-next-line\r\n      if(!titleVal.value.replace(/\\s/g,\"\") == \"\"){ // just making all the space to one space and check wheather it is a value or empty string\r\n        if(edit){\r\n          taskVal.node.title = titleVal.value;\r\n          updatingTask(taskVal, false);  // false we do for means that this is not strike\r\n          titleVal.value='';\r\n          setEdit(false);\r\n        }else{\r\n          const {createTask} = contextType;\r\n          createTask(titleVal.value);\r\n          titleVal.value = ''\r\n        }  \r\n      }\r\n    };\r\n\r\n    return (\r\n    <>\r\n      <div style={{height:\"100px\"}} id=\"particles-js\"></div>\r\n      <div className=\"container\">\r\n        <div id=\"task-container\">\r\n          <div id=\"form-wrapper\">\r\n            <form id=\"form\" onSubmit={handleSubmit}>\r\n              <div className=\"flex-wrapper\">\r\n                <div style={{flex: 6}}>\r\n                  <input  className=\"form-control\" id=\"title\" type=\"text\" name=\"title\" placeholder=\"Add task..\"/>\r\n                </div>\r\n                <div style={{flex: 1}}>\r\n                  <input id=\"submit\" className=\"btn btn-warning\" type=\"submit\" name=\"Add\" />\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n\r\n          <div id=\"list-wrapper\">\r\n              {tasks.map(function(task){\r\n                return(\r\n                  <div key={task.node.id} className=\"task-wrapper flex-wrapper\">\r\n                    \r\n                    <div onClick={() => strikeUnstrike(task)} style={{flex:7}}> {/* So here we write the condtional control statement */}\r\n                      {task.node.completed === false ? (<span>{task.node.title}</span>) : (<strike>{task.node.title}</strike>) }\r\n                    </div>\r\n                    \r\n                    <div style={{flex:1}}>\r\n                      <button onClick={() => startEdit(task)} className=\"btn btn-sm btn-outline-info\">Edit</button>\r\n                    </div>\r\n                    \r\n                    <div style={{flex:1}}>\r\n                      <button onClick={() => deleteTask(task)} className=\"btn btn-sm btn-outline-dark delete\"><i style={{color:\"inherit\"}} className=\"fa fa-trash\"></i></button>\r\n                    </div>\r\n\r\n                  </div>  \r\n                );\r\n              })}\r\n          </div>\r\n\r\n        </div>    \r\n      </div>\r\n\r\n      <div style={displayVal === true ? {visibility: ''} : {visibility: 'hidden'}} id='bubbles'>\r\n        <img src={baseUrl + \"/static/bubble.png\"} alt=\"bubble\"/>\r\n        <img src={baseUrl + \"/static/bubble.png\"} alt=\"bubble\"/>\r\n        <img src={baseUrl + \"/static/bubble.png\"} alt=\"bubble\"/>\r\n        <img src={baseUrl + \"/static/bubble.png\"} alt=\"bubble\"/>\r\n        <img src={baseUrl + \"/static/bubble.png\"} alt=\"bubble\"/>\r\n        <img src={baseUrl + \"/static/bubble.png\"} alt=\"bubble\"/>\r\n        <img src={baseUrl + \"/static/bubble.png\"} alt=\"bubble\"/>\r\n      </div> \r\n    </>       \r\n    );\r\n}\r\n\r\n","import React from 'react';\nimport Tasks from './task.js';\nimport TaskContextProvider from './contexts/taskContext.js';\n\nfunction App() {\n\n  return (\n    <TaskContextProvider>\n      <Tasks/>\n    </TaskContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}